// generated by stringer -type MsgType,ClientFlag -output enum_strings.go; DO NOT EDIT

package tmux

import "fmt"

const (
	_MsgType_name_0 = "MsgVersion"
	_MsgType_name_1 = "MsgIdentifyFlagsMsgIdentifyTermMsgIdentifyTTYNameMsgIdentifyCWDMsgIdentifyStdinMsgIdentifyEnvironMsgIdentifyDoneMsgIdentifyClientPid"
	_MsgType_name_2 = "MsgCommandMsgDetachMsgDetachKillMsgExitMsgExitedMsgExitingMsgLockMsgReadyMsgResizeMsgShellMsgShutdownMsgStderrMsgStdinMsgStdoutMsgSuspendMsgUnlockMsgWakeup"
)

var (
	_MsgType_index_0 = [...]uint8{0, 10}
	_MsgType_index_1 = [...]uint8{0, 16, 31, 49, 63, 79, 97, 112, 132}
	_MsgType_index_2 = [...]uint8{0, 10, 19, 32, 39, 48, 58, 65, 73, 82, 90, 101, 110, 118, 127, 137, 146, 155}
)

func (i MsgType) String() string {
	switch {
	case i == 12:
		return _MsgType_name_0
	case 100 <= i && i <= 107:
		i -= 100
		return _MsgType_name_1[_MsgType_index_1[i]:_MsgType_index_1[i+1]]
	case 200 <= i && i <= 216:
		i -= 200
		return _MsgType_name_2[_MsgType_index_2[i]:_MsgType_index_2[i+1]]
	default:
		return fmt.Sprintf("MsgType(%d)", i)
	}
}

const _ClientFlag_name = "ClientTerminalClientExitClientRedrawClientStatusCientRepeatClientSuspendedClientBadClientIdentifyClientDeadClientBordersClientReadOnlyClientRedrawWindowClientControlClientControlControlClientFocusedClientUTF8Client256ColoursClientIdentified"

var _ClientFlag_map = map[ClientFlag]string{
	1:      _ClientFlag_name[0:14],
	4:      _ClientFlag_name[14:24],
	8:      _ClientFlag_name[24:36],
	16:     _ClientFlag_name[36:48],
	32:     _ClientFlag_name[48:59],
	64:     _ClientFlag_name[59:74],
	128:    _ClientFlag_name[74:83],
	256:    _ClientFlag_name[83:97],
	512:    _ClientFlag_name[97:107],
	1024:   _ClientFlag_name[107:120],
	2048:   _ClientFlag_name[120:134],
	4096:   _ClientFlag_name[134:152],
	8192:   _ClientFlag_name[152:165],
	16384:  _ClientFlag_name[165:185],
	32768:  _ClientFlag_name[185:198],
	65536:  _ClientFlag_name[198:208],
	131072: _ClientFlag_name[208:224],
	262144: _ClientFlag_name[224:240],
}

func (i ClientFlag) String() string {
	if str, ok := _ClientFlag_map[i]; ok {
		return str
	}
	return fmt.Sprintf("ClientFlag(%d)", i)
}
